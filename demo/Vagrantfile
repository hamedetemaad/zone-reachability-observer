# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "debian/bookworm64"
  config.vm.provider :libvirt
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.provision :file, source: './tools/', destination: "/tmp"
  config.vm.provision :shell, path: "./bootstrap.sh", run: 'always'

  # VM1 - 192.168.10.0/24
  config.vm.define "fakeDB1" do |db|
    db.vm.network "private_network",
      :libvirt__network_name => 'first_vagrant_private_net',
      ip: "192.168.10.2",
      :libvirt__netmask => '255.255.255.0',
      :libvirt__forward_mode => 'route',
      :libvirt__dhcp_enabled => true
    db.vm.provision :shell, :inline => "sudo ip route add 192.168.20.0/24 via 192.168.10.1"
    db.vm.provision :shell, :inline => "sudo ip route add 192.168.30.0/24 via 192.168.10.1"
    db.vm.provision :shell, :inline => "sudo ip route add 192.168.40.0/24 via 192.168.10.1"
  end

  # VM2 - 192.168.20.0/24
  config.vm.define "fakeLoadBalancer1" do |lb|
    lb.vm.network "private_network",
      :libvirt__network_name => 'second_vagrant_private_net',
      ip: "192.168.20.2",
      :libvirt__netmask => '255.255.255.0',
      :libvirt__forward_mode => 'route',
      :libvirt__dhcp_enabled => true
    lb.vm.provision :shell, :inline => "sudo ip route add 192.168.10.0/24 via 192.168.20.1"
    lb.vm.provision :shell, :inline => "sudo ip route add 192.168.30.0/24 via 192.168.20.1"
    lb.vm.provision :shell, :inline => "sudo ip route add 192.168.40.0/24 via 192.168.20.1"
    lb.vm.provision :shell, :inline => "ping 192.168.30.2 >/dev/null &"
  end

  # VM3 - 192.168.30.0/24
  config.vm.define "fakeMicroService1" do |app1|
    app1.vm.network "private_network",
      :libvirt__network_name => 'third_vagrant_private_net',
      ip: "192.168.30.2",
      :libvirt__netmask => '255.255.255.0',
      :libvirt__forward_mode => 'route',
      :libvirt__dhcp_enabled => true
    app1.vm.provision :shell, :inline => "sudo ip route add 192.168.10.0/24 via 192.168.30.1"
    app1.vm.provision :shell, :inline => "sudo ip route add 192.168.20.0/24 via 192.168.30.1"
    app1.vm.provision :shell, :inline => "sudo ip route add 192.168.40.0/24 via 192.168.30.1"
    app1.vm.provision :shell, :inline => "ping 192.168.10.2 >/dev/null &"
    app1.vm.provision :shell, :inline => "ping 192.168.40.2 >/dev/null &"
  end

  # VM4 - 192.168.40.0/24
  config.vm.define "fakeMicroService2" do |app2|
    app2.vm.network "private_network",
      :libvirt__network_name => 'fourth_vagrant_private_net',
      ip: "192.168.40.2",
      :libvirt__netmask => '255.255.255.0',
      :libvirt__forward_mode => 'route',
      :libvirt__dhcp_enabled => true
    app2.vm.provision :shell, :inline => "sudo ip route add 192.168.10.0/24 via 192.168.40.1"
    app2.vm.provision :shell, :inline => "sudo ip route add 192.168.20.0/24 via 192.168.40.1"
    app2.vm.provision :shell, :inline => "sudo ip route add 192.168.30.0/24 via 192.168.40.1"
    app2.vm.provision :shell, :inline => "ping 192.168.10.2 > /dev/null &"
  end

  # VM5 - 192.168.50.0/24
  config.vm.define "monitoring" do |monitoring|
    monitoring.vm.network "private_network",
      :libvirt__network_name => 'fifth_vagrant_private_net',
      ip: "192.168.50.2",
      :libvirt__netmask => '255.255.255.0',
      :libvirt__forward_mode => 'route',
      :libvirt__dhcp_enabled => true
    monitoring.vm.provision :shell, :inline => "sudo ip route add 192.168.10.0/24 via 192.168.50.1"
    monitoring.vm.provision :shell, :inline => "sudo ip route add 192.168.20.0/24 via 192.168.50.1"
    monitoring.vm.provision :shell, :inline => "sudo ip route add 192.168.30.0/24 via 192.168.50.1"
    monitoring.vm.provision :shell, :inline => "sudo ip route add 192.168.40.0/24 via 192.168.50.1"
    monitoring.vm.provision :shell, path: "./monitoring.sh", run: 'always'
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessable to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
